<!DOCTYPE html>
<html>
<head>
  <title>User - Ambulance Tracker</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
  <style>
    #map { height: 100vh; }

    #request-ambulance {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 12px 24px;
      font-size: 16px;
      background-color: #ff4c4c;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      z-index: 1000;
      transition: background-color 0.3s ease;
    }

    #request-ambulance:hover {
      background-color: #e04343;
    }

    #request-ambulance.loading::after {
      content: '...';
      animation: dots 1s steps(3, end) infinite;
      display: inline-block;
      margin-left: 6px;
    }

    @keyframes dots {
      0%, 20% { content: ''; }
      40% { content: '.'; }
      60% { content: '..'; }
      80%, 100% { content: '...'; }
    }

    #no-driver-msg {
      position: absolute;
      bottom: 70px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #ffc107;
      color: black;
      padding: 10px 20px;
      border-radius: 6px;
      font-weight: bold;
      z-index: 1001;
      display: none;
    }
  </style>
</head>
<body>
  <div id="map"></div>
  <div id="no-driver-msg">‚ùå No ambulance found nearby. Please try again later.</div>
  <button id="request-ambulance">Request Ambulance</button>

  <script>
    const userEmail = "<%= typeof user !== 'undefined' ? user.email : '' %>";
  </script>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
  <script>
    const socket = io();

    let userMarker = null;
    let driverMarkers = {};
    let routeControl = null;
    let userLatitude = 0, userLongitude = 0;

    const map = L.map("map").setView([0, 0], 13);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "ctrl-alt-elite contributors"
    }).addTo(map);

    navigator.geolocation.watchPosition((position) => {
      userLatitude = position.coords.latitude;
      userLongitude = position.coords.longitude;

      socket.emit("user-location", {
        latitude: userLatitude,
        longitude: userLongitude,
        email: userEmail
      });

      if (!userMarker) {
        userMarker = L.marker([userLatitude, userLongitude], {
          icon: L.icon({ iconUrl: "/image/user.png", iconSize: [30, 30] }),
        }).addTo(map);
        map.setView([userLatitude, userLongitude], 13);
      } else {
        userMarker.setLatLng([userLatitude, userLongitude]);
      }
    });

    socket.on("driver-location-update", (drivers) => {
      for (const id in driverMarkers) {
        if (!drivers[id]) {
          map.removeLayer(driverMarkers[id]);
          delete driverMarkers[id];
        }
      }

      for (const id in drivers) {
        const loc = drivers[id];
        if (!driverMarkers[id]) {
          driverMarkers[id] = L.marker([loc.latitude, loc.longitude], {
            icon: L.icon({ iconUrl: "/image/ambulance.png", iconSize: [40, 40] }),
          }).addTo(map);
        } else {
          driverMarkers[id].setLatLng([loc.latitude, loc.longitude]);
        }
      }
    });

    socket.on("ambulance-accepted", ({ driverLocation, userLocation, driverName, driverPhone }) => {
      if (routeControl) map.removeControl(routeControl);

      for (const id in driverMarkers) {
        map.removeLayer(driverMarkers[id]);
        delete driverMarkers[id];
      }

      L.marker([driverLocation.latitude, driverLocation.longitude], {
        icon: L.icon({ iconUrl: "/image/ambulance.png", iconSize: [40, 40] }),
      }).addTo(map);

      routeControl = L.Routing.control({
        waypoints: [
          L.latLng(driverLocation.latitude, driverLocation.longitude),
          L.latLng(userLocation.latitude, userLocation.longitude),
        ],
        routeWhileDragging: false,
        addWaypoints: false,
        draggableWaypoints: false,
        fitSelectedRoutes: true,
        show: false,
      }).addTo(map);

      document.getElementById("no-driver-msg").style.display = "none";
      requestBtn.classList.remove("loading");
      requestBtn.disabled = false;

      alert(`üöë Ambulance Accepted!\nüë®‚Äç‚úàÔ∏è Driver: ${driverName}\nüìû Phone: ${driverPhone}`);
    });

    const requestBtn = document.getElementById("request-ambulance");

    requestBtn.addEventListener("click", () => {
      if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
      }

      document.getElementById("no-driver-msg").style.display = "none";
      requestBtn.classList.add("loading");
      requestBtn.disabled = true;

      socket.emit("ambulance-request", {
        latitude: userLatitude,
        longitude: userLongitude
      });

      // Timeout to show no driver found if not accepted within 15s
      setTimeout(() => {
        if (!routeControl) {
          document.getElementById("no-driver-msg").style.display = "block";
          requestBtn.classList.remove("loading");
          requestBtn.disabled = false;
        }
      }, 15000);
    });

    socket.on("user-disconnected", () => {
      if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
      }
    });
  </script>
</body>
</html>
