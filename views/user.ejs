<!DOCTYPE html>
<html>
<head>
  <title>User - Ambulance Tracker</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
  <style>
    #map { height: 100vh; }
    #request-ambulance {
      position: absolute; bottom: 20px; left: 50%; transform: translateX(-50%);
      padding: 12px 24px; font-size: 16px;
      background-color: #ff4c4c; color: white;
      border: none; border-radius: 5px; cursor: pointer; z-index: 1000;
    }
  </style>
</head>
<body>
  <div id="map"></div>
  <button id="request-ambulance">Request Ambulance</button>

  <!-- Pass user email from EJS to JS -->
  <script>
    const userEmail = "<%= user.email %>";
  </script>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
  <script>
    const socket = io();

    let userMarker = null;
    let driverMarkers = {};
    let routeControl = null;
    let userLatitude = 0, userLongitude = 0;

    const map = L.map("map").setView([0, 0], 13);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "© OpenStreetMap contributors"
    }).addTo(map);

    navigator.geolocation.watchPosition((position) => {
      userLatitude = position.coords.latitude;
      userLongitude = position.coords.longitude;

      // Send location with email for backend to store socketId
      socket.emit("user-location", {
        latitude: userLatitude,
        longitude: userLongitude,
        email: userEmail
      });

      if (!userMarker) {
        userMarker = L.marker([userLatitude, userLongitude], {
          icon: L.icon({ iconUrl: "/image/user.png", iconSize: [30, 30] }),
        }).addTo(map);
        map.setView([userLatitude, userLongitude], 13);
      } else {
        userMarker.setLatLng([userLatitude, userLongitude]);
      }
    });

    // Show available ambulances
    socket.on("driver-location-update", (drivers) => {
      for (const id in driverMarkers) {
        if (!drivers[id]) {
          map.removeLayer(driverMarkers[id]);
          delete driverMarkers[id];
        }
      }

      for (const id in drivers) {
        const loc = drivers[id];
        if (!driverMarkers[id]) {
          driverMarkers[id] = L.marker([loc.latitude, loc.longitude], {
            icon: L.icon({ iconUrl: "/image/ambulance.png", iconSize: [40, 40] }),
          }).addTo(map);
        } else {
          driverMarkers[id].setLatLng([loc.latitude, loc.longitude]);
        }
      }
    });

    // When a driver accepts the request
    socket.on("ambulance-accepted", ({ driverLocation, userLocation, driverName, driverPhone }) => {
      // Clean up old route
      if (routeControl) {
        map.removeControl(routeControl);
      }

      // Remove all old ambulance markers
      for (const id in driverMarkers) {
        map.removeLayer(driverMarkers[id]);
        delete driverMarkers[id];
      }

      // Show accepted driver's marker
      const acceptedDriverMarker = L.marker([driverLocation.latitude, driverLocation.longitude], {
        icon: L.icon({ iconUrl: "/image/ambulance.png", iconSize: [40, 40] }),
      }).addTo(map);

      // Draw route from driver to user
      routeControl = L.Routing.control({
        waypoints: [
          L.latLng(driverLocation.latitude, driverLocation.longitude),
          L.latLng(userLocation.latitude, userLocation.longitude),
        ],
        routeWhileDragging: false,
        addWaypoints: false,
        draggableWaypoints: false,
        fitSelectedRoutes: true,
        show: false,
      }).addTo(map);

      // Show driver details
      alert(`🚑 Ambulance Accepted!\n👨‍✈️ Driver: ${driverName}\n📞 Phone: ${driverPhone}`);
    });

    // Request ambulance
    document.getElementById("request-ambulance").addEventListener("click", () => {
      // Only clean up route, not ambulance markers
      if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
      }

      socket.emit("ambulance-request", {
        latitude: userLatitude,
        longitude: userLongitude
      });
    });

    // Optional: cleanup on disconnect
    socket.on("user-disconnected", () => {
      if (routeControl) {
        map.removeControl(routeControl);
        routeControl = null;
      }
    });
  </script>
</body>
</html>
